// Software Architecture notes
@misc{fowler-what-is-architecture,
	author       = {Martin Fowler},
	title        = {Software Architecture Guide},
	howpublished = {\url{https://martinfowler.com/architecture/}},
	month        = {August},
	year         = {2019},
}
@inproceedings{wicked-architecture,
	title        = {What Makes Teaching Software Architecture Difficult?},
	author       = {Galster, Matthias and Angelov, Samuil},
	year         = 2016,
	booktitle    = {Proceedings of the 38th International Conference on Software Engineering Companion},
	location     = {Austin, Texas},
	publisher    = {Association for Computing Machinery},
	series       = {ICSE '16},
	pages        = {356--359},
	doi          = {10.1145/2889160.2889187},
	isbn         = 9781450342056,
	url          = {https://doi.org/10.1145/2889160.2889187},
	numpages     = 4,
	keywords     = {education, learners, training, software architecture, students},
	annotate     = {An article which attempts to enumerate the reasons why teaching software architecture is hard. They coin the term `wicked architecture` to explain the imprecise nature of software architecture that students struggle with.}
}
@misc{martin-principles-patterns,
	author       = {Robert C. Martin},
	title        = {Design Principles and Design Patterns},
	howpublished = {\url{https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf}},
	year         = {2000},
	annotate     = {Blog post from Uncle Bob's Object Mentor site describing the SOLID design principles.},
	note = "Accessed: 2022-01-10"
}
// ADR notes
@article{kruchten-arch-decisions,
	issn = {0740-7459},
	abstract = {Software development has to deal with many challenges-increasing system complexity, requests for better quality, the burden of maintenance operations, distributed production, and high staff turnover, to name just a few. Increasingly, software companies that strive to reduce their products' maintenance costs demand flexible, easy-to-maintain designs. Software architecture constitutes the cornerstone of software design, key for facing these challenges. Several years after the "software crisis" began in the mid-1970s, software architecture practice emerged as a mature (although still growing) discipline, capable of addressing the increasing complexity of new software systems.},
	journal = {IEEE software},
	pages = {36--42},
	volume = {26},
	publisher = {IEEE},
	number = {2},
	year = {2009},
	title = {The Decision View's Role in Software Architecture Practice},
	copyright = {Copyright IEEE Computer Society Mar/Apr 2009},
	language = {eng},
	address = {Los Alamitos},
	author = {Kruchten, Philippe and Capilla, Rafael and Duenas, Juan Carlos},
	keywords = {architectural design decision ; architectural knowledge ; Architecture ; architecture views ; Collaborative software ; Computer architecture ; Context modeling ; Costs ; Decision analysis ; decision view ; Intellectual capital ; Production systems ; Software architecture ; Software design ; Software engineering ; Software maintenance ; Software systems ; Standards development ; Studies}
}
@misc{nygard-adr,
	author       = {Michael Nygard},
	title        = {Documenting Architecture Decisions},
	howpublished = {\url{https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions}},
	month        = {November},
	year         = {2011},
	note = "Accessed: 2022-01-27"
}
@misc{y-statement,
	author       = {Olaf Zimmermann},
	title        = {Architectural Decisions -- The Making Of},
	howpublished = {\url{https://ozimmer.ch/practices/2020/04/27/ArchitectureDecisionMaking.html}},
	month        = {March},
	year         = {2021},
	note = "Accessed: 2022-02-02"
}
@misc{why-write-adrs,
	author       = {Eli Perkins},
	title        = {Why Write ADRs},
	howpublished = {\url{https://github.blog/2020-08-13-why-write-adrs/}},
	month        = {August},
	year         = {2020},
	note = "Accessed: 2022-02-02"
}
// Security notes
@misc{security-principles,
	title        = {7 Application Security Principles You Need to Know},
	author       = {Eric Boersma},
	year         = 2020,
	month        = {October},
	howpublished = {\url{https://www.cprime.com/resources/blog/security-by-design-7-principles-you-need-to-know/}},
	annotate     = {A blog post outlining 7 security principles which developers should keep in mind to ensure a secure system.}
}
@article{1975-security-design-principles,
	title        = {The protection of information in computer systems},
	author       = {Saltzer, Jerome H and Schroeder, Michael D},
	year         = 1975,
	month        = {September},
	journal      = {Proceedings of the IEEE},
	publisher    = {IEEE},
	volume       = 63,
	number       = 9,
	pages        = {1278--1308},
	doi          = {10.1109/PROC.1975.9939},
	annotate     = {Early text which is the first (to my knowledge) to enumerate security design principles.}
}
@inbook{1988-security-design-principles,
	title        = {Building a Secure Computer System},
	author       = {Gasser, Morrie},
	year         = 1988,
	month        = {January},
	publisher    = {Van Nostrand Reinhold Company},
	pages        = {35--44},
	isbn         = 9780442230227,
	annotate     = {Another early text which enumerates a collection of security design principles.}
}
@inbook{2001-security-design-principles,
	title        = {Building Secure Software: How to Avoid Security Problems the Right Way},
	author       = {Viega, John and McGraw, Gary R},
	year         = 2001,
	month        = {September},
	publisher    = {Addison-Wesley Professional},
	pages        = {91--113},
	isbn         = 9780672334092,
	annotate     = {A more recent text that also enumerates a number of security design principles.}
}
@inbook{death-taxes-and-failure,
	title        = {Security Principles To Live By},
	author       = {Howard, Michael and LeBlanc, David},
	year         = 2002,
	month        = {December},
	booktitle    = {Writing Secure Code},
	publisher    = {Microsoft Press Redmond, Wash.},
	pages        = 64,
	isbn         = {0735617228},
	annotate     = {Source contains an excellent quote on the principle of failing securely ``Death, taxes, and computer system failure are all inevitable to some degree. Plan for the event.''}
}
@misc{failing-securely,
	title        = {Failing Securely},
	author       = {Gegick, Michael and Barnum, Sean},
	year         = 2005,
	month        = {December},
	publisher    = {Cybersecurity \& Infrastructure Security Agency},
	howpublished = {\url{https://www.cisa.gov/uscert/bsi/articles/knowledge/principles/failing-securely}},
	annotate     = {A page with a collation of relevant expert opinions on failing securely.}
}
@misc{facebook-outage,
	title        = {More details about the {October} 4 outage},
	author       = {Santosh Janardhan},
	year         = 2021,
	month        = {October},
	howpublished = {\url{https://engineering.fb.com/2021/10/05/networking-traffic/outage-details/}},
	annotate     = {A Facebook engineering blog post which explains the cause of an outage and the subsequent challenges caused by failing securely}
}
@article{shannons-maxim,
	title        = {Communication theory of secrecy systems},
	author       = {Shannon, C. E.},
	year         = 1949,
	journal      = {The Bell System Technical Journal},
	volume       = 28,
	number       = 4,
	pages        = {656--715},
	doi          = {10.1002/j.1538-7305.1949.tb00928.x},
	annotate     = {The article where Shannon's maxim ``One ought to design systems under the assumption that the enemy will immediately gain full familiarity with them'' is coined. Shannon's maxim is a particular wording of Kerckhoff's principle.}
}
@misc{password-security,
	title        = {2021 World Password Day: How Many Will Be Stolen This Year?},
	author       = {Sam Manjarres},
	year         = 2021,
	month        = {May},
	howpublished = {\url{https://www.secplicity.org/2021/05/04/2021-world-password-day-how-many-will-be-stolen-this-year/}},
	annotate     = {A number of hopefully alarming facts about password theft and cracking in 2021.}
}
@article{least-privilege,
	title        = {Protection and the Control of Information Sharing in Multics},
	author       = {Saltzer, Jerome H.},
	year         = 1974,
	month        = {July},
	journal      = {Communications of the ACM},
	publisher    = {Association for Computing Machinery},
	volume       = 17,
	number       = 7,
	pages        = {388--402},
	doi          = {10.1145/361011.361067},
	issn         = {0001-0782},
	url          = {https://doi.org/10.1145/361011.361067},
	issue_date   = {July 1974},
	numpages     = 15,
	annotate     = {The article where Saltzer coined the principle of least priviledge, one of the foundations of security design principles.}
}
// Layered Architecture notes
@article{ballofmud,
	title        = {Big ball of mud},
	author       = {Foote, Brian and Yoder, Joseph},
	year         = 1997,
	journal      = {Pattern languages of program design},
	volume       = 4,
	pages        = {654--692},
	annotate     = {The source for the term `big ball of mud` used to describe an architecture without intentional style.}
}
// Pipeline Architecture
@inproceedings{mapreduce,
	title        = {MapReduce: Simplified Data Processing on Large Clusters},
	author       = {Jeffrey Dean and Sanjay Ghemawat},
	year         = 2004,
	booktitle    = {OSDI'04: Sixth Symposium on Operating System Design and Implementation},
	address      = {San Francisco, CA},
	pages        = {137--150}
}
@misc{mapreduce-critique,
	title        = {MapReduce: A major step backwards},
	author       = {David J. DeWitt and Michael Stonebraker},
	year         = 2008,
	month        = {January},
	howpublished = {\url{https://dsf.berkeley.edu/cs286/papers/backwards-vertica2008.pdf}},
	annotate     = {An article which critiques the popularity of the MapReduce pattern.}
}
// Docker notes
@misc{static-hello-world,
	title        = {Smallest x86 {ELF} Hello World},
	author       = {henszey},
	year         = {},
	month        = {},
	howpublished = {\url{http://timelessname.com/elfbin/}},
	annotate     = {A small article which investigates the creation of a small statically linked hello world program.}
}
@misc{docker-from-scratch,
	title        = {Docker: FROM scratch},
	author       = {Changhui Xu},
	year         = 2020,
	month        = {July},
	howpublished = {\url{https://codeburst.io/docker-from-scratch-2a84552470c8}},
	annotate     = {An article detailing the process required for running a statically linked hello world program in the scratch docker environment.}
}
// Views
@article{4+1-model,
	title        = {Architectural blueprints --- the `4+1' view model of software architecture},
	author       = {Kruchten, Philippe},
	year         = 1995,
	journal      = {IEEE software},
	volume       = 12,
	number       = 6,
	pages        = {42--50},
	note 	 = {\url{https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf}}
}
// Examples
@misc{faa-aas,
	title        = {Federal Aviation Administration (FAA) Advanced Automation System (AAS)},
	author       = {Tom Hilburn and Alice Squires and Heidi Davidz and Richard Turner},
	year         = {2021},
	month        = {October},
	howpublished = {\url{https://www.sebokwiki.org/wiki/Federal_Aviation_Administration_(FAA)_Advanced_Automation_System_(AAS)}},
	annotate     = {A small article which investigates the creation of a small statically linked hello world program.},
	note 	 = {Example from the \textit{Guide to the Systems Engineering Body of Knowledge} \url{https://www.sebokwiki.org/w/index.php?title=Guide_to_the_Systems_Engineering_Body_of_Knowledge_(SEBoK)&oldid=63222}}
}
// Misc. Articles
@inproceedings{lister-tracing-explaining-writing,
	author = {Lister, Raymond and Fidge, Colin and Teague, Donna},
	title = {Further Evidence of a Relationship between Explaining, Tracing and Writing Skills in Introductory Programming},
	year = {2009},
	isbn = {9781605583815},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1562877.1562930},
	doi = {10.1145/1562877.1562930},
	abstract = {This paper reports on a replication of earlier studies into a possible hierarchy of programming skills. In this study, the students from whom data was collected were at a university that had not provided data for earlier studies. Also, the students were taught the programming language "Python", which had not been used in earlier studies. Thus this study serves as a test of whether the findings in the earlier studies were specific to certain institutions, student cohorts, and programming languages. Also, we used a non-parametric approach to the analysis, rather than the linear approach of earlier studies. Our results are consistent with the earlier studies. We found that students who cannot trace code usually cannot explain code, and also that students who tend to perform reasonably well at code writing tasks have also usually acquired the ability to both trace code and explain code.},
	booktitle = {Proceedings of the 14th Annual ACM SIGCSE Conference on Innovation and Technology in Computer Science Education},
	pages = {161–165},
	numpages = {5},
	keywords = {CS1, comprehension, taxonomy, novice programmers, tracing},
	location = {Paris, France},
	series = {ITiCSE '09}
}
@inproceedings{lister-neo-piagetian,
	author = {Lister, Raymond},
	title = {Concrete and Other Neo-Piagetian Forms of Reasoning in the Novice Programmer},
	year = {2011},
	isbn = {9781920682941},
	publisher = {Australian Computer Society, Inc.},
	address = {AUS},
	abstract = {This paper brings together a number of empirical research results on novice programmers, using a neo-Piagetian theoretical framework. While there already exists literature connecting programming with classical Piagetian theory, in this paper we apply neo-Piagetian theory. Using that neo-Piagetian perspective, we offer an explanation as to why attempts to predict ability for programming via classical Piagetian tests have yielded mixed results. We offer a neo-Piagetian explanation of some of the previously puzzling observations about novice programmers, such as why many of them make little use of diagrams, and why they often manifest a non-systematic approach to writing programs. We also develop the relatively unexplored relationship between concrete operational reasoning and programming, by exploring concepts such as conservation and reversibility.},
	booktitle = {Proceedings of the Thirteenth Australasian Computing Education Conference - Volume 114},
	pages = {9–18},
	numpages = {10},
	keywords = {novice programmer, neo-Piagetian},
	location = {Perth, Australia},
	series = {ACE '11}
}