openapi: 3.0.3
info:
  title: SpamOverflow
  description: |
    An API service that 
  contact:
    name: CSSE6400
    url: https://csse6400.uqcloud.net
    email: noreply@uq.edu.au
  version: 1.0.0
servers:
- url: http://email.api.spamoverflow.com/api/v1
tags:
- name: email
  description: Malicious email service
paths:
  /health:
    get:
      tags:
      - email
      summary: Query the health of the service.
      description: |
        The health endpoint is useful for determining whether an instance is still healthy.
        This can help if you are configuring auto-scaling groups or load balancers.

        We do not specify the response payload for this endpoint,
        however you may find it useful to return a more detailed status of your system.
        For example: https://eloquentcode.com/rest-api-design-health-check-endpoint
      responses:
        200:
          description: Service is healthy.
          content: {}
        500:
          description: Service is not healthy.
          content: {}
        503:
          description: Service is not healthy.
          content: {}
  /customers/{customer_id}/emails:
    get:
      tags:
      - email
      summary: List all submitted emails for a given customer.
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Returns only this many results, 0 < limit <= 1000.
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 100
        example: 20
      - name: offset
        in: query
        description: Skip this many results before returning, 0 <= offset.
        schema:
          type: integer
          minimum: 0
          default: 0
        example: 0
      - name: start
        in: query
        description: |
          Only return emails submitted after from this date.
          The date should be in RFC3339 format.
        schema:
          type: string
          format: date-time
          example: 2024-02-21T13:10:05Z
      - name: end
        in: query
        description: |
          Only return emails submitted before this date.
          The date should be in RFC3339 format.
        schema:
          type: string
          format: date-time
          example: 2024-02-21T14:10:05Z
      - name: from
        in: query
        description: |
          Only return emails submitted from this email address.
          The email address should be in the format of user@domain.
        schema:
          type: string
          format: email
          example: 'no-reply@uq.edu.au'
      - name: to
        in: query
        description: |
          Only return emails submitted to this email address.
          The email address should be in the format of user@domain.
          Parsing of emails to remove '+' aliases is not supported and will be treated as a different email address.
        schema:
          type: string
          format: email
          example: 'support@uq.edu.au'
      - name: state
        in: query
        description: |
          Only return emails with this state.
          The state should be one of 'pending', 'scanned', 'failed'.
        schema:
          type: string
          enum:
            - pending
            - scanning
            - scanned
            - failed
        example: 'scanned'
      - name: only_malicious
        in: query
        description: |
          Only return emails that have been flagged as malicious.
          This will ignore the state parameter and treat it as if it was 'scanned'.
        schema:
          type: boolean
          example: true
      responses:
        200:
          description: List of all emails, with the filters applied.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Email'
        400:
          description: |
            Invalid customer_id or query parameters.

            Return value is not specified but should describe the error.
        404:
          description: Customer does not exist or no emails have been submitted for this customer (before filters applied).
        500:
          description: |
            An unknown error occurred trying to process the request.

            Return value is not specified but should describe the error.
    post:
      tags:
      - email
      summary: Post a new email scan request.
      description: |
        If the customer account does not exist, it will be created.
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailPost'
        required: true
      responses:
        201:
          description: The Email scan request has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        400:
          description: |
            Body parameter was malformed or invalid.

            Return value is not specified but should describe the error.
          content: {}
        500:
          description: |
            An unknown error occurred trying to process the request.

            Return value is not specified but should describe the error.
      x-codegen-request-body-name: body
  /customers/{customer_id}/emails/{id}:
    get:
      tags:
      - email
      summary: Get information for a particular email.
      description: |
        Returns a representation of an email for a customer with the status of the scan and its result. 
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4.
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The email identifier that was returned when the request was created.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Information about the requested ticket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        400:
          description: |
            Body parameter was malformed or invalid.

            Return value is not specified but should describe the error.
          content: {}
        404:
          description: The email for the customer does not exist. If a customer does not exist for the given customer_id then the response will be a 404.
          content: {}
        500:
          description: |
            An unknown error occurred trying to process the request.

            Return value is not specified but should describe the error.
  /customers/{customer_id}/reports/actors:
    get:
      tags:
      - email
      summary: Get malicious senders of emails.
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4.
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of all senders/actors that have atleast 1 email thats flagged as malicious.
          content:
            application/json:
              schema:
                type: object
                example:
                  total: 1
                  data:
                    - id: "no-reply@uq.edu.au"
                      count: 256
                properties:
                  total:
                    type: integer
                    description: The number of entries in the list.
                    minimum: 0
                  data:
                    type: array
                    description: The list of actors with atleast 1 malicious email.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Email address of the sender of malicious email.
                        count:
                          type: integer
                          description: The number of times this actor has been seen.
                          minimum: 1
        404:
          description: The customer does not exist.
          content: {}
  /customers/{customer_id}/reports/recipients:
    get:
      tags:
      - email
      summary: Get users who have received malicious emails.
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4. todo(eh) does the uuidv4 requirement mean 
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of all recipients, who are associated with this customer, who have received malicious email.
          content:
            application/json:
              schema:
                type: object
                example:
                  total: 1
                  data:
                    - id: "support@uq.edu.au"
                      count: 10000
                properties:
                  total:
                    type: integer
                    description: The number of entries in the list.
                    minimum: 0
                  data:
                    type: array
                    description: The list of recipients with at least 1 malicious email.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Email address of the recipient of malicious email.
                        count:
                          type: integer
                          description: The number of malicious emails identified as being received by this recipient.
                          minimum: 1
        404:
          description: The customer does not exist.
          content: {}
  /customers/{customer_id}/reports/domains:
    get:
      tags:
      - email
      summary: Get the domains that appeared in malicious emails.
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A report consisting of the link domains found in malicious emails for the given customer.
          content:
            application/json:
              schema:
                type: object
                example:
                  total: 1
                  data:
                    - id: "uq.edu.au"
                      count: 16
                    - id: "uq.mu"
                      count: 5
                properties:
                  total:
                    type: integer
                    description: The number of entries in the list.
                    minimum: 0
                  data:
                    type: array
                    description: The list of domains which were contained in suspicious emails.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The domain found in a suspicious email.
                        count:
                          type: integer
                          description: The number of times this domain has been seen.
                          minimum: 1
        404:
          description: The customer does not exist.
          content: {}
 
components:
  schemas:
    Email:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier.
        created_at:
          type: string
          format: date-time
          description: The date and time the email was submitted.
          example: 2024-02-21T13:10:05Z
        contents:
          type: object
          description: The contents of the email.
          properties:
            to:
              type: string
              format: email
              description: The email address the email was sent to.
              example: "no-reply@uq.edu.au"
            from:
              type: string
              format: email
              description: The email address the email was sent from.
              example: "support@uq.edu.au"
            subject:
              type: string
              description: The subject of the email.
              example: "Important information about your account."
            body:
              type: string
              description: The body of the email.
              example: "Dear customer,\nwe have noticed some suspicious activity on your account. Please click [here](https://scam-check.uq.edu.au) to reset your password."
        status:
          type: string
          enum:
            - pending
            - scanned
            - failed
          description: The status of the email scan.
          default: "pending"
          example: "scanned"
        malicious:
          type: boolean
          description: Whether the email was flagged as malicious.
        metadata:
          type: object
          properties:
            spamhammer:
              type: string
              description: SpamHammer metadata for this email.
              example: "1|14"
        
    EmailPost:
      type: object
      properties:
        metadata:
          type: object
          properties:
            spamhammer:
              type: string
              description: SpamHammer metadata for this email.
              example: "1|14"
        contents:
          type: object
          description: The contents of the email.
          properties:
            to:
              type: string
              format: email
              description: The email address the email was sent to.
              example: "no-reply@uq.edu.au"
            from:
              type: string
              format: email
              description: The email address the email was sent from.
              example: "support@uq.edu.au"
            subject:
              type: string
              description: The subject of the email.
              example: "Important information about your account."
            body:
              type: string
              description: The body of the email.
              example: "Dear customer,\nwe have noticed some suspicious activity on your account. Please click [here](https://scam-check.uq.edu.au) to reset your password."