swagger: "2.0"
info:
  description: "A text-to-speech service to provide improved accessibility to the University of Queensland's teaching content."
  version: "0.1.0"
  title: "Chatterbox WIP"
  contact:
    name: CSSE6400
    url: https://csse6400.uqcloud.net
    email: noreply@uq.edu.au
host: "chatterbox.services.its.uq.edu.au"
basePath: "/v1"
tags:
- name: "tts"
  description: "Text-to-speech service"
schemes:
- "http"
paths:
  /health:
    get:
      tags: ["tts"]
      summary: "Query the health of the chatterbox service."
      description: |
        The health endpoint is a useful for determining whether an instance is still healthy.
        This can help if you are configuring auto-scaling groups.
        
        We do not specify the response payload for this endpoint,
        however you may find it useful to return a more detailed status of your system.
        For example: https://eloquentcode.com/rest-api-design-health-check-endpoint
      responses:
        "200":
          description: "Service is healthy"
        "503":
          description: "Service is not healthy"
  /text:
    get:
      tags: ["tts"]
      summary: "List all generated audios"
      description: |
        List all of the generated audios in descending order of creation date-time.
        The response is paginated with 10 elements on each page.
      produces:
        - "application/json"
      parameters:
        - in: path
          name: page
          type: integer
          default: 1
          description: |
            The page number to return.
            If page is 3, returns elements between 30 and 40.
      responses:
        "200":
          description: "List of generated audios."
          schema:
            type: array
            items:
              $ref: "#/definitions/TextResponse"
            
    post:
      tags: ["tts"]
      summary: "Request generation of a new text audio"
      description: |
        Request a new message is translated into synthesized speech.

        If the requested operation is SYNC, the request should not return until a speech file has been generated (or error).

        If the requested operation is ASYNC, the request should return immediantly regardless of whether the request has finished, if the request is still working the status should just be PENDING.

        Messages greater than 280 characters must be ASYNC or a bad request should be returned.

        The error field in the response is left unspecified, you should populate this field as you see appropriate.
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/TextRequest"
      responses:
        "200":
          description: "The request returned successfully."
          schema:
            $ref: "#/definitions/TextResponse"
        "400":
          description: "Body parameter was malformed or invalid."
        "500":
          description: "An unknown error occurred trying to process the request. The response should contain as much of the payload as possible, the error field should be populated in this case."
          schema:
            $ref: "#/definitions/TextResponse"
  /text/{id}:
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: string
        description: "The identifier of the text resource."
    get:
      tags: ["tts"]
      summary: "Retrieve details about a text-to-speech request."
      produces:
        - "application/json"
      
      responses:
        "200":
          description: "Successfully found a text resource."
          schema:
            $ref: "#/definitions/TextResponse"
        "404":
          description: "Unknown resource identifier."
    delete:
      tags: ["tts"]
      summary: "Delete a text-to-speech job."
      description: |
        "This endpoint will remove all known information about a text-to-speech job, including any generated audio files."
      responses:
        "200":
          description: "Resource successfully deleted."
        "404":
          description: "Unknown resource identifier."
  /model:
    get:
      tags: ["tts"]
      summary: "List all available text-to-speech models."
      description: |
        The full list of available text-to-speech model identifiers.
        This content should not be paginated.
      produces:
        - "application/json"
      responses:
        "200":
          description: "List of available text-to-speech model identifiers."
          schema:
            type: array
            items:
              $ref: "#/definitions/Models"
  /model/{id}:
    parameters:
      - name: "id"
        in: "path"
        required: true
        type: string
        description: The string identifier of the model as listed by the /model endpoint.
    get:
      tags: ["tts"]
      summary: "Retrieve details about a specified text-to-speech model."
      produces:
        - "application/json"
      responses:
        "200":
          description: "All known details about the text-to-speech model."
          schema:
            $ref: "#/definitions/Model"
        "404":
          description: "Unknown resource identifier."
definitions:
  Models:
    type: "string"
    description: "Text-to-speech model"
    enum:
      - tacotron
      - tacotron2
      - glow-tts
      - speedy-speech
      - align-tts
      - fastpitch
      - fastspeech
      - vits
  Model:
    type: "object"
    properties: 
      name:
        $ref: "#/definitions/Models"
      description: 
        type: "string"
        description: "A description of the model"
        example: "EK1 en-rp tacotron2 by NMStoker"
      author:
        type: "string"
        nullable: true
        description: "Author of the model. This field may be null."
        example: "Eren GÃ¶lge @erogol"
      license:
        type: "string"
        nullable: true
        description: "License of the model. This field may be null."
        example: "CC BY-NC-ND 4.0"
      url:
        type: "string"
        nullable: true
        format: "uri"
        description: "URL to download the model. This field may be null."
        example: "https://coqui.gateway.scarf.sh/v0.1.0/tts_models--en--ek1--tacotron2.zip"
  TextRequest:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Hello, CSSE6400!"
        description: "Content of the text request, synchronous requests must be between 1 and 280 characters. Asynchronous requests must be between 280 and 9001."
      operation:
        type: "string"
        description: "Perform the request synchronously or asynchronously"
        enum:
          - SYNC
          - ASYNC
      model:
        $ref: "#/definitions/Models"
  TextResponse:
    allOf:
      - type: "object"
        properties:
          id:
            type: "string"
            format: "uuid"
            description: "Unique identifier of the text request"
      - $ref: "#/definitions/TextRequest"
      - type: "object"
        properties:
          status:
            type: "string"
            enum:
              - PENDING
              - COMPLETED
              - FAILED
          resource:
            type: "string"
            format: "uri"
            description: "URL where the .wav file can be found, if the request is completed."
            example: "https://presignedurldemo.s3.eu-west-2.amazonaws.com/image.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAJJWZ7B6WCRGMKFGQ%2F20180210%2Feu-west-2%2Fs3%2Faws4_request&X-Amz-Date=20180210T171315Z&X-Amz-Expires=1800&X-Amz-Signature=12b74b0788aa036bc7c3d03b3f20c61f1f91cc9ad8873e3314255dc479a25351&X-Amz-SignedHeaders=host"
          created_at:
            type: "string"
            format: "date-time"
            example: "2022-04-01T00:43:29.111Z"
          processed_at:
            type: "string"
            format: "date-time"
            example: "2022-04-09T07:43:30.111Z"
          error:
            type: "object"

