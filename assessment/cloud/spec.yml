openapi: 3.0.3
info:
  title: SpamOverflow
  description: |
    An API service that 
  contact:
    name: CSSE6400
    url: https://csse6400.uqcloud.net
    email: noreply@uq.edu.au
  version: 1.0.0
servers:
- url: http://email.api.spamoverflow.com/api/v1
tags:
- name: email
  description: Malicious email service
paths:
  /health:
    get:
      tags:
      - email
      summary: Query the health of the service.
      description: |
        The health endpoint is useful for determining whether an instance is still healthy.
        This can help if you are configuring auto-scaling groups or load balancers.

        We do not specify the response payload for this endpoint,
        however you may find it useful to return a more detailed status of your system.
        For example: https://eloquentcode.com/rest-api-design-health-check-endpoint
      responses:
        200:
          description: Service is healthy.
          content: {}
        500:
          description: Service is not healthy.
          content: {}
        503:
          description: Service is not healthy.
          content: {}
  /customers/{customer_id}/emails:
    get:
      tags:
      - email
      summary: List all submitted emails for a given customer.
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Returns only this many results, 0 < limit <= 1000.
        schema:
          type: integer
          minimum: 1
          maximum: 1000
          default: 100
        example: 20
      - name: offset
        in: query
        description: Skip this many results before returning, 0 <= offset.
        schema:
          type: integer
          minimum: 0
          default: 0
        example: 0
      - name: start
        in: query
        description: |
          Only return emails submitted after from this date.
          The date should be in RFC3339 format.
        schema:
          type: string
          format: date-time
          example: 2024-02-21T13:10:05Z
      - name: end
        in: query
        description: |
          Only return emails submitted before this date.
          The date should be in RFC3339 format.
        schema:
          type: string
          format: date-time
          example: 2024-02-21T14:10:05Z
      - name: from
        in: query
        description: |
          Only return emails submitted from this email address.
          The email address should be in the format of user@domain.
        schema:
          type: string
          format: email
          example: 'no-reply@uq.edu.au'
      - name: to
        in: query
        description: |
          Only return emails submitted to this email address.
          The email address should be in the format of user@domain.
          Parsing of emails to remove '+' aliases is not supported and will be treated as a different email address.
        schema:
          type: string
          format: email
          example: 'support@uq.edu.au'
      responses:
        200:
          description: List of all emails, with the filters applied.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Email'
        400:
          description: Invalid customer_id or query parameters.
          content: {}
        404:
          description: Customer does not exist or no emails have been submitted for this customer (before filters applied).
          content: {}
    post:
      tags:
      - email
      summary: Post a new email scan request.
      description: |
        If the customer account does not exist, it will be created.
      parameters:
      - name: customer_id
        in: path
        description: The customer identifier which is a unique UUID. This identifier is kept unique upstream of this API. The customer_id must be a UUIDv4.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailPost'
        required: true
      responses:
        201:
          description: The ticket has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        400:
          description: |
            Body parameter was malformed or invalid.
            This includes passing concerts or users that do not exist.

            Return value is not specified but should describe the error.
          content: {}
        422:
          description: Ticket purchase failed as no tickets were available (i.e. the concert has sold out).
          content: {}
        500:
          description: An unknown error occurred trying to process the request.

            Return value is not specified but should attempt to describe the error.
          content: {}
      x-codegen-request-body-name: body
  /customers/{id}/emails/{id}:
    get:
      tags:
      - email
      summary: Get information for a particular ticket.
      parameters:
      - name: id
        in: path
        description: The ticket identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Information about the requested ticket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        404:
          description: The ticket does not exist.
          content: {}
  /customers/{id}/reports/actors:
    get:
      tags:
      - email
      summary: Get the printed ticket if it exists.
      parameters:
      - name: id
        in: path
        description: The ticket identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The printed ticket SVG.
          content:
            image/svg+xml:
              schema:
                type: string
                example: |
                  <?xml version="1.0"?>
                  <!-- Generated by SVGo -->
                  <svg width="1200" height="518"
                       xmlns="http://www.w3.org/2000/svg"
                       xmlns:xlink="http://www.w3.org/1999/xlink">
                  <desc>12345678-1234-1234-1234-123456789012</desc>
                  <rect x="0" y="0" width="1200" height="518" style="fill:rgb(255,255,255)" />
                  <rect x="0" y="0" width="200" height="518" style="fill:rgb(92,158,173)" />
                  <rect x="200" y="0" width="20" height="518" style="fill:rgb(50,98,115)" />
                  <circle cx="210" cy="100" r="50" style="fill:rgb(50,98,115)" />
                  <text x="300" y="100" style="text-anchor:left;font-size:36px;fill:black" >Phantom of the Opera</text>
                  <text x="300" y="150" style="text-anchor:left;font-size:24px;fill:black" >2023-06-07</text>
                  <text x="300" y="200" style="text-anchor:left;font-size:24px;fill:black" >Sydney Opera House</text>
                  <text x="300" y="250" style="text-anchor:left;font-size:24px;fill:black" >12345678-1234-1234-1234-123456789012</text>
                  <line x1="300" y1="300" x2="900" y2="300" style="stroke:rgb(0,0,0);stroke-width:2" />
                  <text x="300" y="350" style="text-anchor:left;font-size:24px;fill:black" >Evan Hughes</text>
                  <text x="300" y="400" style="text-anchor:left;font-size:24px;fill:black" >example@uq.edu.au</text>
                  <text x="300" y="450" style="text-anchor:left;font-size:24px;fill:black" >12345678-1234-1234-1234-123456789012</text>
                  <rect x="1190" y="0" width="10" height="518" style="fill:rgb(255,215,0)" />
                  <rect x="1000" y="80" width="150" height="1" style="fill:rgb(0,0,0)" />
                  ...
                  </svg>

        404:
          description: The ticket does not exist or has not been printed yet.
          content: {}
  /customers/{id}/reports/recipients:
    get:
      tags:
      - email
      summary: Get the printed ticket if it exists.
      parameters:
      - name: id
        in: path
        description: The ticket identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The printed ticket SVG.
          content:
            image/svg+xml:
              schema:
                type: string
                example: |
                  <?xml version="1.0"?>
                  <!-- Generated by SVGo -->
                  <svg width="1200" height="518"
                       xmlns="http://www.w3.org/2000/svg"
                       xmlns:xlink="http://www.w3.org/1999/xlink">
                  <desc>12345678-1234-1234-1234-123456789012</desc>
                  <rect x="0" y="0" width="1200" height="518" style="fill:rgb(255,255,255)" />
                  <rect x="0" y="0" width="200" height="518" style="fill:rgb(92,158,173)" />
                  <rect x="200" y="0" width="20" height="518" style="fill:rgb(50,98,115)" />
                  <circle cx="210" cy="100" r="50" style="fill:rgb(50,98,115)" />
                  <text x="300" y="100" style="text-anchor:left;font-size:36px;fill:black" >Phantom of the Opera</text>
                  <text x="300" y="150" style="text-anchor:left;font-size:24px;fill:black" >2023-06-07</text>
                  <text x="300" y="200" style="text-anchor:left;font-size:24px;fill:black" >Sydney Opera House</text>
                  <text x="300" y="250" style="text-anchor:left;font-size:24px;fill:black" >12345678-1234-1234-1234-123456789012</text>
                  <line x1="300" y1="300" x2="900" y2="300" style="stroke:rgb(0,0,0);stroke-width:2" />
                  <text x="300" y="350" style="text-anchor:left;font-size:24px;fill:black" >Evan Hughes</text>
                  <text x="300" y="400" style="text-anchor:left;font-size:24px;fill:black" >example@uq.edu.au</text>
                  <text x="300" y="450" style="text-anchor:left;font-size:24px;fill:black" >12345678-1234-1234-1234-123456789012</text>
                  <rect x="1190" y="0" width="10" height="518" style="fill:rgb(255,215,0)" />
                  <rect x="1000" y="80" width="150" height="1" style="fill:rgb(0,0,0)" />
                  ...
                  </svg>

        404:
          description: The ticket does not exist or has not been printed yet.
          content: {}
  /customers/{id}/reports/domains:
    get:
      tags:
      - email
      summary: Get the printed ticket if it exists.
      parameters:
      - name: id
        in: path
        description: The ticket identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The printed ticket SVG.
          content:
            image/svg+xml:
              schema:
                type: string
                example: |
                  <?xml version="1.0"?>
                  <!-- Generated by SVGo -->
                  <svg width="1200" height="518"
                       xmlns="http://www.w3.org/2000/svg"
                       xmlns:xlink="http://www.w3.org/1999/xlink">
                  <desc>12345678-1234-1234-1234-123456789012</desc>
                  <rect x="0" y="0" width="1200" height="518" style="fill:rgb(255,255,255)" />
                  <rect x="0" y="0" width="200" height="518" style="fill:rgb(92,158,173)" />
                  <rect x="200" y="0" width="20" height="518" style="fill:rgb(50,98,115)" />
                  <circle cx="210" cy="100" r="50" style="fill:rgb(50,98,115)" />
                  <text x="300" y="100" style="text-anchor:left;font-size:36px;fill:black" >Phantom of the Opera</text>
                  <text x="300" y="150" style="text-anchor:left;font-size:24px;fill:black" >2023-06-07</text>
                  <text x="300" y="200" style="text-anchor:left;font-size:24px;fill:black" >Sydney Opera House</text>
                  <text x="300" y="250" style="text-anchor:left;font-size:24px;fill:black" >12345678-1234-1234-1234-123456789012</text>
                  <line x1="300" y1="300" x2="900" y2="300" style="stroke:rgb(0,0,0);stroke-width:2" />
                  <text x="300" y="350" style="text-anchor:left;font-size:24px;fill:black" >Evan Hughes</text>
                  <text x="300" y="400" style="text-anchor:left;font-size:24px;fill:black" >example@uq.edu.au</text>
                  <text x="300" y="450" style="text-anchor:left;font-size:24px;fill:black" >12345678-1234-1234-1234-123456789012</text>
                  <rect x="1190" y="0" width="10" height="518" style="fill:rgb(255,215,0)" />
                  <rect x="1000" y="80" width="150" height="1" style="fill:rgb(0,0,0)" />
                  ...
                  </svg>

        404:
          description: The ticket does not exist or has not been printed yet.
          content: {}
 
components:
  schemas:
    ReportActors:
      type: object
      example:
        id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      properties:
        id:
          type: string
          description: Unique identifier.
    ReportRecipients:
      type: object
      example:
        id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      properties:
        id:
          type: string
          description: Unique identifier.
    ReportLinks:
      type: object
      example:
        id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      properties:
        id:
          type: string
          description: Unique identifier.
    Email:
      type: object
      example:
        id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      properties:
        id:
          type: string
          description: Unique identifier.
    EmailPost:
      type: object
      example:
        id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      properties:
        id:
          type: string
          description: Unique identifier.
