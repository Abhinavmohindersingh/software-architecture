openapi: 3.0.1
info:
  title: TicketOverflow
  description: |
    An API service that supports ticket purchasing, ticket generation, and seating plan generationg for TicketOverflow.

    Note that the URL used in the cURL examples below are just illustrative, you should replace [http://tickets.api.ticketoverflow.com/api/v1/](http://tickets.api.ticketoverflow.com/api/v1) with the host of your service.
  contact:
    name: CSSE6400
    url: https://csse6400.uqcloud.net
    email: noreply@uq.edu.au
  version: 0.0.1
servers:
- url: http://tickets.api.ticketoverflow.com/api/v1
tags:
- name: ticket
  description: Ticket service
- name: user
  description: Users service
- name: concert
  description: Concerts service
paths:
  /health:
    get:
      tags:
      - ticket
      summary: Query the health of the service.
      description: |
        The health endpoint is a useful for determining whether an instance is still healthy.
        This can help if you are configuring auto-scaling groups or load balancers.

        We do not specify the response payload for this endpoint,
        however you may find it useful to return a more detailed status of your system.
        For example: https://eloquentcode.com/rest-api-design-health-check-endpoint
      responses:
        200:
          description: Service is healthy.
          content: {}
        500:
          description: Service is not healthy.
          content: {}
        503:
          description: Service is not healthy.
          content: {}
  /users:
    get:
      tags:
      - user
      summary: List all registered users for the service.
      description: |
        Provides a list of registered users.
        The users are currently a hard-coded list of JSON objects.

        It is another teams responsibility to implement this service.
        You need to create this mock endpoint for your service to query.

        The list of hard-coded users is available here: https://github.com/csse6400/ticketoverflow-users
      responses:
        200:
          description: List of all registered users for the service.
          content:
            application/json:
              schema:
                type: array
                example: |
                  [
                    {
                      "user_id": "e571964f-f2b7-4200-9fb0-2af749092fa1",
                      "name": "Evan Hughes"
                    },
                    ...
                  ]
                items:
                  $ref: '#/components/schemas/User'
  /users/{user_id}:
    get:
      tags:
      - user
      summary: Get information for a particular user.
      description: |
        Get the hard-coded user information for a particular user based on their user_id.
        Refer to the /users endpoint for what data to return.

        It is another teams responsibility to implement this service.
        You need to create this mock endpoint for your service to query.
      parameters:
      - name: user_id
        in: path
        description: The user identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: User information for the given user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /concerts:
    get:
      tags:
      - concert
      summary: List all the concerts registered with TicketOverflow.
      responses:
        200:
          description: List of all concerts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Concert'
    post:
      tags:
      - concert
      summary: Register a new concert for TicketOverflow.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Concert'
        required: true
      responses:
        200:
          description: The request returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
              example:
                concert_id: "2"
        400:
          description: |
            Body parameter was malformed or invalid.

            Return value is not specified but should describe the error.
          content: {}
        500:
          description: An unknown error occurred trying to process the request. The
            response should attempt to contain a description of the error.
          content: {}
      x-codegen-request-body-name: body
  /concerts/{concert_id}:
    get:
      tags:
      - concert
      summary: Get information for a particular concert.
      parameters:
      - name: concert_id
        in: path
        description: The concert identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Concert information for the given concert.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
        404:
          description: The concert does not exist.
          content: {}
    put:
      tags:
        - concert
      summary: Update details about a concert.
      parameters:
      - name: concert_id
        in: path
        description: The concert identifier.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Concert'
        required: true
      responses:
        200:
          description: The request returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
              example:
                concert_id: "2"
        400:
          description: |
            Body parameter was malformed or invalid.

            Return value is not specified but should describe the error.
          content: {}
        404:
          description: The concert does not exist.
          content: {}
        500:
          description: An unknown error occurred trying to process the request. The
            response should attempt to contain a description of the error.
          content: {}
      x-codegen-request-body-name: body
  /concerts/{concert_id}/seats:
    get:
      tags:
      - concert
      summary: Get the seating plan as an SVG for a particular concert.
      description:
        The SVG must be generated using the provided command line tool.
      parameters:
      - name: concert_id
        in: path
        description: The concert identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Seating plan for the given concert.
          content:
            image/svg+xml:
              schema:
                type: string
                format: binary
        404:
          description: The concert does not exist.
          content: {}
  /tickets:
    get:
      tags:
      - ticket
      summary: List all of the purchased tickets.
      parameters:
      - name: user_id
        in: query
        description: Filter only the tickets purchased by the given user. This is an optional query parameter.
        schema:
          type: string
        example: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      - name: concert_id
        in: query
        description: Filter only the tickets purchased for the given concert. This is an optional query parameter.
        schema:
          type: string
        example: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      responses:
        200:
          description: Successfully found a text resource.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        404:
          description: Unknown resource identifier.
          content: {}
    post:
      tags:
      - ticket
      summary: Purchase a ticket for a concert.
      description: |
        The ticket must be purchased for a concert that exists.
        The ticket must be purchased by a user that exists.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketPurchase'
        required: true
      responses:
        200:
          description: The request returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        400:
          description: |
            Body parameter was malformed or invalid.
            This includes passing concerts or users that do not exist.

            Return value is not specified but should describe the error.
          content: {}
        500:
          description: An unknown error occurred trying to process the request. The
            response should attempt to contain a description of the error.
          content: {}
      x-codegen-request-body-name: body
  /tickets/{ticket_id}:
    get:
      tags:
      - ticket
      summary: Get information for a particular ticket.
      parameters:
      - name: ticket_id
        in: path
        description: The ticket identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ticket information for the given ticket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        404:
          description: The ticket does not exist.
          content: {}
  /tickets/{ticket_id}/print:
    post:
      tags:
      - ticket
      summary: Request that a ticket is printed asynchronously.
      description: |
        Asynchronously start the printing of a ticket.
        This must use the provided command line tool.
        
        When a request is made, the ticket print status should be set to PENDING
        until it is finished with either ERROR or PRINTED.
      parameters:
      - name: ticket_id
        in: path
        description: The ticket identifier.
        required: true
        schema:
          type: string
      responses:
        202:
          description: The asynchronous request was successfully started.
          content: {}
        404:
          description: |
            The ticket does not exist.
          content: {}
        500:
          description: An unknown error occurred trying to process the request. The
            response should attempt to contain a description of the error.
          content: {}
    get:
      tags:
      - ticket
      summary: Get the printed ticket if it exists.
      parameters:
      - name: ticket_id
        in: path
        description: The ticket identifier.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The printed ticket SVG.
          content:
            image/svg+xml:
              schema:
                type: string
                format: binary
        404:
          description: The ticket does not exist or has not been printed yet.
          content: {}
    
components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
          description: Unique user identifier.
          example: e571964f-f2b7-4200-9fb0-2af749092fa1
        name:
          type: string
          description: Full name of the user.
          example: Evan Hughes
    TicketPurchase:
      type: object
      example:
        concert_id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
        user_id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
      properties:
        concert_id:
          type: string
          description: Unique concert identifier.
          example: "e571964f-f2b7-4200-9fb0-2af749092fa1"
        user_id:
          type: string
          description: Unique user identifier.
          example: "e571964f-f2b7-4200-9fb0-2af749092fa1"
    Ticket:
      type: object
      example:
        ticket_id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
        concert:
          concert_id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
          concert_url: "/concerts/e571964f-f2b7-4200-9fb0-2af749092fa1"
        user:
          user_id: "e571964f-f2b7-4200-9fb0-2af749092fa1"
          user_url: "/users/e571964f-f2b7-4200-9fb0-2af749092fa1"
        print_status: "PRINTED"
      properties:
        ticket_id:
          type: string
          description: Unique ticket identifier.
          example: "e571964f-f2b7-4200-9fb0-2af749092fa1"
        concert:
          type: object
          properties:
            concert_id:
              type: string
              description: Unique concert identifier.
              example: "e571964f-f2b7-4200-9fb0-2af749092fa1"
            concert_url:
              type: string
              description: URL path to the concert resource.
        user:
          type: object
          properties:
            user_id:
              type: string
              description: Unique user identifier
              example: "e571964f-f2b7-4200-9fb0-2af749092fa1"
            user_url:
              type: string
              description: URL path to the user resource.
              example: "/users/e571964f-f2b7-4200-9fb0-2af749092fa1"
        print_status:
          type: string
          description: The printed status of the ticket.
          enum:
          - NOT_PRINTED
          - PRINTED
          - ERROR
          - PENDING
    Concert:
      type: object
      example:
        concert_id: e571964f-f2b7-4200-9fb0-2af749092fa1
        name: The Beatles
        venue: The Gabba
        capacity: 250
        status: ACTIVE
      properties:
        concert_id:
          type: string
          description: Unique concert identifier.
          example: e571964f-f2b7-4200-9fb0-2af749092fa1
        name:
          type: string
          description: Name of the concert.
          example: The Beatles
        venue:
          type: string
          description: The arena or venue where a concert is to be held.
          example: The Gabba
        capacity:
          type: integer
          description: Maximum capacity for the concert.
          example: 250
        status:
          type: string
          description: The current status of the concert.
          enum:
          - ACTIVE
          - CANCELLED
          - SOLD_OUT

